{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Simple URCL Syntax",
	"scopeName": "source.redcmd.syntax.simple.urcl",
	"patterns": [
		{ "include": "#comment-block"	},
		{ "include": "#comment-line"	},
		{ "include": "#square-bracket"	},
		{ "include": "#angle-bracket"	},
		{ "include": "#preprocessor"	},
		{ "include": "#instruction"		},
		{ "include": "#comparison"		},
		{ "include": "#seperator"		},
		{ "include": "#register"		},
		{ "include": "#memory"			},
		{ "include": "#instruction??"	},
		{ "include": "#variable"		},
		{ "include": "#numeric"			},
		{ "include": "#string"			},
		{ "include": "#label"			},
		{ "include": "#macro"			},
		{ "include": "#port"			},
		{ "include": "#bits"			},
		{ "include": "#char"			},
		{ "include": "#invalid"			}
	],
	"repository": {
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment",
			"contentName": "comment"
		},
		"comment-line": {
			"match": "//.*$",
			"name": "comment"
		},
		"preprocessor": {
			"match": "\\b(?i:BITS|RUN|R[AO]M|MIN(?:HEAP|REG|STACK))\\b",
			"name": "keyword.control"
		},
		"instruction": {
			"match": "\\b(?i:ADD|BEV|BN[CZ]|BOD|BR[CENPZ]|BS[LSR]|B[GLN]E|CAL|CPY|DEC|D[DQW]|[HM]LT|IMM|INC?|JMP|LL?OD|[LRP]SH|L?STR|MO[DV]|N?AND|NEG|NO[PT]|OUT|POP|RET|SETN?[CE]|SRS|SUB|S?(?>DIV|BR[GL]|B[GL]E|SET[GL]E?)|X?N?OR)\\b",
			"name": "keyword"
		},
		"instruction??": {
			"match": "(?<=^\\s*)[a-zA-Z]\\w*(?=\\s+)",
			"name": "keyword markup.italic"
		},
		"comparison": {
			"match": "(?<!\\S)[=<>]=?(?!\\S)",
			"name": "keyword.operator.comparison"
		},
		"seperator": {
			"match": ";",
			"name": "punctuation.terminator.statement"
		},
		"register": {
			"patterns": [
				{
					"match": "(?<!\\w)([$Rr]\\d+)\\b",
					"name": "variable"
				},
				{
					"match": "\\b(?i:SP|PC)\\b",
					"name": "support.class"
				}
			]
		},
		"variable": {
			"match": "(?<=[]\\[()\\s<>,])[A-Za-z]\\w*(?=[]\\[()\\s<>;,])",
			"name": "variable markup.italic"
		},
		"angle-bracket": {
			"begin": "<",
			"end": ">",
			"captures": { "0": { "name": "angle-bracket.urclpp" } },
			"patterns": [ { "include": "$base" } ]
		},
		"square-bracket": {
			"begin": "\\[",
			"end": "]",
			"captures": { "0": { "name": "square-bracket.urclpp" } },
			"patterns": [ { "include": "$base" } ]
		},
		"numeric": {
			"match": "(?<!\\w)(?:~?[-+])?(?:0(?:x(.*?)|b(.*?)|o(.*?))|(\\d.*?))\\b",
			"captures": {
				"0": { "name": "constant.numeric" },
				"1": { "patterns": [ { "include": "#hexadecimal" }, { "include": "#underscore" }, { "include": "#invalid-illegal" } ] },
				"2": { "patterns": [ { "include": "#binary"		 }, { "include": "#underscore" }, { "include": "#invalid-illegal" } ] },
				"3": { "patterns": [ { "include": "#octal"		 }, { "include": "#underscore" }, { "include": "#invalid-illegal" } ] },
				"4": { "patterns": [ { "include": "#decimal"	 }, { "include": "#underscore" }, { "include": "#invalid-illegal" } ] }
			}
		},
		"hexadecimal": {
			"match": "\\h+",
			"name": "constant.numeric.hexadecimal"
		},
		"binary": {
			"match": "[01]+",
			"name": "constant.numeric.binary"
		},
		"octal": {
			"match": "[0-7]+",
			"name": "constant.numeric.octal"
		},
		"decimal": {
			"match": "\\d+",
			"name": "constant.numeric.decimal"
		},
		"underscore": {
			"match": "_+",
			"name": "punctuation.definition.tag"
		},
		"memory": {
			"match": "(?<!\\w)[#Mm]\\d+\\b",
			"name": "support.class"
		},
		"string": {
			"match": "\".*?\"",
			"name": "string"
		},
		"char": {
			"match": "'(?>(\\\\(?>u\\h{,4}|.))|.)?(.*?)'",
			"captures": {
				"0": { "name": "string" },
				"1": { "name": "constant.character.escape" },
				"2": { "name": "invalid markup.underline" }
			}
		},
		"label": {
			"match": "(?<!\\w)\\.\\w+\\b",
			"name": "support.function"
		},
		"macro": {
			"match": "@\\w+\\b",
			"name": "keyword.control"
		},
		"port": {
			"match": "%(?i:(ASCII7?|BIN|BUFFER|BUS|CHAR[56]|COLOR|CPUBUS|DATA|FIXED|FLOAT|[GMNST](?:1[0-6]|\\d)|HEX|INSTR|N?ADDR|NLEG|NOTE|NUMB|PAGE|PROFILE|RNG|SPECIAL|SUPPORTED|TEXT|UD(?:1[0-6]|\\d)|U?INT|UTF8|WAIT|X|Y)|\\w+)\\b",
			"captures": {
				"0": { "name": "support.class" },
				"1": { "name": "strong" }
			}
		},
		"bits": {
			"match": "@(?i:BITS|S?M(AX|SB)|[UL]HALF)\\b",
			"name": "keyword.control"
		},
		"invalid": {
			"match": "[^\\w\\s][^]\\[()\\w\\s\"/@$#;<>+=~.'-]*",
			"name": "invalid"
		},
		"invalid-illegal": {
			"match": "\\S",
			"name": "invalid.illegal markup.underline"
		}
	}
}