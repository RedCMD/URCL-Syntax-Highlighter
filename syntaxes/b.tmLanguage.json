{
	"name": "redcmd",
	"scopeName": "redcmd.syntax.b",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#comment-block" },
		{ "include": "#asm" },
		{ "include": "#control-statement" },
		{ "include": "#function" },
		{ "include": "#data-type" },
		{ "include": "#numeric" },
		{ "include": "#variable" },
		{ "include": "#parentheses" },
		{ "include": "#braces" },
		{ "include": "#square-brackets" },
		{ "include": "#operator" },
		{ "include": "#seperator" },
		{ "include": "#invalid" }
	],
	"repository": {
		"comment": {
			"match": "//.*$",
			"name": "comment"
		},
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment"
		},
		"asm": {
			"begin": "(?i)(?<=\\s|^)(asm)\\s*{",
			"end": "}",
			"beginCaptures": {
				"1": { "name": "keyword" }
			},
			"name": "braces.curly",
			"patterns": [ { "include": "redcmd.syntax.simple.urcl" } ]
		},
		"parentheses": {
			"begin": "\\(",
			"end": "\\)",
			"name": "parens",
			"patterns": [ { "include": "$self" } ]
		},
		"braces": {
			"begin": "{",
			"end": "}",
			"name": "braces.curly",
			"patterns": [ { "include": "$self" } ]
		},
		"square-brackets": {
			"begin": "\\[",
			"end": "]",
			"name": "brackets.square",
			"patterns": [ { "include": "$self" } ]
		},
		"control-statement": {
			"match": "(?<=[{};]\\s*|^\\s*|(?<parens>\\))\\s*)(if|while|for|(?(<parens>)|(?<else>else)))(?=\\s*(?(<else>){|\\()|\\s*$)|\\b(if|while|for|else)\\b",
			"captures": {
				"2": { "name": "keyword.control" },
				"5": { "name": "invalid" }
			}
		},
		"function": {
			"match": "\\b[A-Za-z_]\\w*(?=\\s*\\()",
			"name": "entity.name.function"
		},
		"data-type": {
			"match": "(?<=[(){};,]\\s*|^\\s*)(auto)((?=\\s*$|\\s+[A-Za-z_])|\\b\\s*[^A-Za-z_]+)|\\b(auto)\\b",
			"captures": {
				"1": { "name": "keyword" },
				"2": { "name": "invalid" },
				"3": { "name": "invalid" }
			}
		},
		"numeric": {
			"match": "\\b(0(?:x(.*?)|b(.*?)|o(.*?))|(\\d.*?))\\b",
			"captures": {
				"1": { "name": "constant.numeric" },
				"2": { "patterns": [ { "include": "#hexadecimal" }, { "include": "#invalid" } ] },
				"3": { "patterns": [ { "include": "#binary" 	 }, { "include": "#invalid" } ] },
				"4": { "patterns": [ { "include": "#octal" 		 }, { "include": "#invalid" } ] },
				"5": { "patterns": [ { "include": "#decimal" 	 }, { "include": "#invalid" } ] }
			}
		},
		"hexadecimal": {
			"match": "\\h+",
			"name": "constant.numeric.hexidecmal"
		},
		"binary": {
			"match": "[01]+",
			"name": "constant.numeric.binary"
		},
		"octal": {
			"match": "[0-7]+",
			"name": "constant.numeric.octal"
		},
		"decimal": {
			"match": "\\d+",
			"name": "constant.numeric.decimal"
		},
		"variable": {
			"match": "\\b[A-Za-z_]\\w*\\b",
			"name": "variable"
		},
		"operator": {
			"match": "(<<=|>>=|->|([&|<>+=-])\\2|[%&|!/^*<>+=~-]=?|[/?])([%&|!/?:^*<>+=~-]*)",
			"captures": {
				"1": { "name": "entity.name.label" },
				"3": { "name": "invalid" }
			}
		},
		"seperator": {
			"match": ";|,(\\s*,)*",
			"captures": {
				"0": { "name": "seperator" },
				"2": { "patterns": [ { "include": "#invalid" } ] }
			}
		},
		"invalid": {
			"match": "\\S",
			"name": "invalid"
		}
	}
}